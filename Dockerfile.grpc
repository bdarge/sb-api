FROM golang:1.20.6-alpine3.18 as builder

ENV APP /app

WORKDIR $APP

RUN apk update && apk add curl bash unzip build-base autoconf automake libtool make g++

#ENV PROTOBUF_VERSION 23.4
#
#ENV PROTOBUF_URL https://github.com/protocolbuffers/protobuf/releases/download/v"$PROTOBUF_VERSION"/protobuf-"$PROTOBUF_VERSION".zip
#
#RUN curl --silent -L -o protobuf.zip "$PROTOBUF_URL" && \
#    unzip protobuf.zip && \
#    cd protobuf-"$PROTOBUF_VERSION" && \
#    ./configure && \
#    make -j$(nproc) && \
#    make install && \
#    cd .. && rm protobuf.zip


RUN PB_REL="https://github.com/protocolbuffers/protobuf/releases" && \
    curl -LO $PB_REL/download/v23.4/protoc-23.4-linux-aarch_64.zip

RUN unzip protoc-23.4-linux-aarch_64.zip -d $APP/.local

ENV PATH="${PATH}:$APP/.local/bin"

RUN ls -al

RUN ls -al .local

RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28 && \
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2 && \
    export PATH="$PATH:$(go env GOPATH)/bin"

RUN ls $(go env GOPATH)/bin

RUN protoc --help

RUN make --help

WORKDIR /tmp/app

COPY . .

RUN go mod download

RUN make proto

RUN go build -o ./build cmd/main.go

FROM golang:1.20-alpine as dev

RUN apk update && \
    apk add make \

WORKDIR /bin/app

RUN ["go", "install", "github.com/githubnemo/CompileDaemon@latest"]

RUN make proto

ENTRYPOINT CompileDaemon -log-prefix=false -build="go build -o ./bin/app ./cmd/" -command="./bin/app"

FROM golang:1.20-alpine as dev_migrator

WORKDIR /bin/app_migrator

RUN ["go", "install", "github.com/githubnemo/CompileDaemon@latest"]

ENTRYPOINT CompileDaemon -log-prefix=false -build="go build -o ./bin/app_migrator ./cmd/" -command="./bin/app_migrator"

FROM alpine:latest as prod

RUN apk --no-cache add ca-certificates git bash

LABEL org.opencontainers.image.source=https://github.com/bdarge/sb-ui

WORKDIR /app

COPY --from=builder /tmp/app/build /app/api

EXPOSE 50052

CMD ["/app/api"]